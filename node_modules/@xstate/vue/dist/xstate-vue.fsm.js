(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue'), require('@xstate/fsm')) :
  typeof define === 'function' && define.amd ? define(['exports', 'vue', '@xstate/fsm'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.XStateVueFSM = {}, global.Vue, global.XStateFSM));
})(this, (function (exports, vue, fsm) { 'use strict';

  var getServiceValue = function (service) {
      var currentValue;
      service
          .subscribe(function (state) {
          currentValue = state;
      })
          .unsubscribe();
      return currentValue;
  };
  function useMachine(stateMachine, options) {
      var service = fsm.interpret(fsm.createMachine(stateMachine.config, options ? options : stateMachine._options)).start();
      var state = vue.shallowRef(getServiceValue(service));
      vue.onMounted(function () {
          service.subscribe(function (currentState) { return (state.value = currentState); });
      });
      vue.onBeforeUnmount(service.stop);
      return { state: state, send: service.send, service: service };
  }
  function useService(service) {
      var serviceRef = vue.isRef(service)
          ? service
          : vue.shallowRef(service);
      var state = vue.shallowRef(serviceRef.value.state);
      vue.watch(serviceRef, function (service, _, onCleanup) {
          state.value = getServiceValue(service);
          var unsubscribe = service.subscribe(function (currentState) {
              if (currentState.changed) {
                  state.value = currentState;
              }
          }).unsubscribe;
          onCleanup(unsubscribe);
      }, {
          immediate: true
      });
      var send = function (event) { return serviceRef.value.send(event); };
      return { state: state, send: send, service: serviceRef };
  }

  exports.useMachine = useMachine;
  exports.useService = useService;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
