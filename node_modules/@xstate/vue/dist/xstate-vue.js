(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vue'), require('xstate')) :
    typeof define === 'function' && define.amd ? define(['exports', 'vue', 'xstate'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.XStateVue = {}, global.Vue, global.XState));
})(this, (function (exports, vue, xstate) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function useInterpret(getMachine) {
        var _a = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _a[_i - 1] = arguments[_i];
        }
        var _b = __read(_a, 2), _c = _b[0], options = _c === void 0 ? {} : _c, observerOrListener = _b[1];
        var machine = typeof getMachine === 'function' ? getMachine() : getMachine;
        var context = options.context, guards = options.guards, actions = options.actions, activities = options.activities, services = options.services, delays = options.delays, rehydratedState = options.state, interpreterOptions = __rest(options, ["context", "guards", "actions", "activities", "services", "delays", "state"]);
        var machineConfig = {
            context: context,
            guards: guards,
            actions: actions,
            activities: activities,
            services: services,
            delays: delays
        };
        var machineWithConfig = machine.withConfig(machineConfig, function () { return (__assign(__assign({}, machine.context), context)); });
        var service = xstate.interpret(machineWithConfig, interpreterOptions).start(rehydratedState ? xstate.State.create(rehydratedState) : undefined);
        var sub;
        vue.onMounted(function () {
            if (observerOrListener) {
                sub = service.subscribe(xstate.toObserver(observerOrListener));
            }
        });
        vue.onBeforeUnmount(function () {
            service.stop();
            sub === null || sub === void 0 ? void 0 : sub.unsubscribe();
        });
        return service;
    }

    function useMachine(getMachine) {
        var _a = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            _a[_i - 1] = arguments[_i];
        }
        var _b = __read(_a, 1), _c = _b[0], options = _c === void 0 ? {} : _c;
        function listener(nextState) {
            // Only change the current state if:
            // - the incoming state is the "live" initial state (since it might have new actors)
            // - OR the incoming state actually changed.
            //
            // The "live" initial state will have .changed === undefined.
            var initialStateChanged = nextState.changed === undefined && Object.keys(nextState.children).length;
            if (nextState.changed || initialStateChanged) {
                state.value = nextState;
            }
        }
        var service = useInterpret(getMachine, options, listener);
        var initialState = service.machine.initialState;
        var state = vue.shallowRef(options.state ? xstate.State.create(options.state) : initialState);
        return { state: state, send: service.send, service: service };
    }

    function isActorWithState(actorRef) {
        return 'state' in actorRef;
    }
    var noop = function () {
        /* ... */
    };
    function defaultGetSnapshot(actorRef) {
        return 'getSnapshot' in actorRef
            ? actorRef.getSnapshot()
            : isActorWithState(actorRef)
                ? actorRef.state
                : undefined;
    }
    function useActor(actorRef, getSnapshot) {
        if (getSnapshot === void 0) { getSnapshot = defaultGetSnapshot; }
        var actorRefRef = vue.isRef(actorRef) ? actorRef : vue.shallowRef(actorRef);
        var state = vue.shallowRef(getSnapshot(actorRefRef.value));
        var send = function (event) {
            actorRefRef.value.send(event);
        };
        vue.watch(actorRefRef, function (newActor, _, onCleanup) {
            state.value = getSnapshot(newActor);
            var unsubscribe = newActor.subscribe({
                next: function (emitted) { return (state.value = emitted); },
                error: noop,
                complete: noop
            }).unsubscribe;
            onCleanup(function () { return unsubscribe(); });
        }, {
            immediate: true
        });
        return { state: state, send: send };
    }

    var defaultCompare = function (a, b) { return a === b; };
    function useSelector(actor, selector, compare, getSnapshot) {
        if (compare === void 0) { compare = defaultCompare; }
        if (getSnapshot === void 0) { getSnapshot = defaultGetSnapshot; }
        var selected = vue.shallowRef(selector(getSnapshot(actor)));
        var updateSelectedIfChanged = function (nextSelected) {
            if (!compare(selected.value, nextSelected)) {
                selected.value = nextSelected;
            }
        };
        var sub;
        vue.onMounted(function () {
            var initialSelected = selector(getSnapshot(actor));
            updateSelectedIfChanged(initialSelected);
            sub = actor.subscribe(function (emitted) {
                var nextSelected = selector(emitted);
                updateSelectedIfChanged(nextSelected);
            });
        });
        vue.onBeforeUnmount(function () {
            sub === null || sub === void 0 ? void 0 : sub.unsubscribe();
        });
        return selected;
    }

    /**
     * Vue composable that spawns an `ActorRef` with the specified `behavior`.
     * The returned `ActorRef` can be used with the `useActor(actorRef)` hook.
     *
     * @param behavior The actor behavior to spawn
     * @returns An ActorRef with the specified `behavior`
     */
    function useSpawn(behavior) {
        var actorRef = xstate.spawnBehavior(behavior);
        return actorRef;
    }

    exports.useActor = useActor;
    exports.useInterpret = useInterpret;
    exports.useMachine = useMachine;
    exports.useSelector = useSelector;
    exports.useSpawn = useSpawn;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
