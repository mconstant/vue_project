import type { ActorSubclass } from "@dfinity/agent";
import type { ProviderOptions } from "../providers/index";
import type { IDL } from "@dfinity/candid";
import type { IConnector, IWalletConnector } from "../providers/connectors";
declare type Provider = {
    icon: any;
    connector: IConnector & Partial<IWalletConnector>;
    name: string;
    id: string;
};
export declare type RootContext = {
    host: string;
    dev: boolean;
    autoConnect: boolean;
    whitelist: Array<string>;
    principal?: string;
    activeProvider?: Provider;
    providers: Array<ProviderOptions>;
    initializedProviders: Array<Provider>;
    actors: {
        [canisterName: string]: ActorSubclass;
    };
    anonymousActors: {
        [canisterName: string]: ActorSubclass;
    };
};
declare type InitEvent = {
    type: "INIT";
    data: {
        whitelist: Array<string>;
        host?: string;
        providers: Array<ProviderOptions>;
        dev?: boolean;
        autoConnect?: boolean;
    };
};
declare type DoneEvent = {
    type: "DONE";
    data: {
        initializedProviders: Array<Provider>;
    };
};
declare type DoneAndConnectedEvent = {
    type: "DONE_AND_CONNECTED";
    data: {
        activeProvider: Provider;
        initializedProviders: Array<Provider>;
        principal: string;
    };
};
declare type ConnectEvent = {
    type: "CONNECT";
    data: {
        provider: string;
    };
};
declare type ConnectDoneEvent = {
    type: "CONNECT_DONE";
    data: {
        activeProvider: Provider;
        principal: string;
    };
};
declare type DisconnectEvent = {
    type: "DISCONNECT";
};
declare type ErrorEvent = {
    type: "ERROR";
    data: {
        error: any;
    };
};
declare type CreateActorEvent = {
    type: "CREATE_ACTOR";
    data: {
        canisterName: string;
        canisterId: string;
        idlFactory: IDL.InterfaceFactory;
    };
};
declare type SaveActorEvent = {
    type: "SAVE_ACTOR";
    data: {
        actor: ActorSubclass;
        canisterName: string;
    };
};
declare type CreateAnonymousActorEvent = {
    type: "CREATE_ANONYMOUS_ACTOR";
    data: {
        canisterName: string;
        canisterId: string;
        idlFactory: IDL.InterfaceFactory;
    };
};
declare type SaveAnonymousActorEvent = {
    type: "SAVE_ANONYMOUS_ACTOR";
    data: {
        actor: ActorSubclass;
        canisterName: string;
    };
};
export declare type RootEvent = InitEvent | DoneEvent | ConnectDoneEvent | DoneAndConnectedEvent | ConnectEvent | DisconnectEvent | ErrorEvent | CreateActorEvent | SaveActorEvent | CreateAnonymousActorEvent | SaveAnonymousActorEvent;
declare const rootMachine: import("xstate").StateMachine<RootContext, any, RootEvent, {
    value: any;
    context: RootContext;
}, import("xstate").BaseActionObject, import("xstate").ServiceMap, import("xstate").ResolveTypegenMeta<import("xstate").TypegenDisabled, RootEvent, import("xstate").BaseActionObject, import("xstate").ServiceMap>>;
export { rootMachine as connectMachine };
